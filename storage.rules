
rules_version = '2';

// Define rules for Firebase Storage
service firebase.storage {
  // Match the bucket structure
  match /b/{bucket}/o {

    // Rules for the 'audiobooks' folder where original uploads are stored
    // {userId} wildcard matches the user's UID
    // {fileName} wildcard matches the uploaded file name
    match /audiobooks/{userId}/{fileName} {
      // Allow authenticated users to read, create, update, and delete files
      // ONLY IF the 'userId' segment in the path matches their own UID.
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for the 'audiobooks_generated' folder where generated audio might be stored
    // Adjust this path if your server-side generation uses a different structure.
    match /audiobooks_generated/{userId}/{fileName} {
       // Allow authenticated users to read files if the 'userId' matches their UID.
       allow read: if request.auth != null && request.auth.uid == userId;

       // Allow authenticated users to write (create/update/delete) generated audio files
       // ONLY IF the 'userId' segment matches their own UID.
       // If a server process generates these, you might need different rules (e.g., allow write: if false; and manage uploads via backend).
       allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Implicitly deny access to all other paths if no rule above matches.
    // You could add an explicit deny rule, but it's usually not necessary:
    // match /{allPaths=**} {
    //   allow read, write: if false;
    // }
  }
}
